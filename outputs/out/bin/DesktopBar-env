// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/gtk3/index.ts
import Astal7 from "gi://Astal?version=3.0";
import Gtk4 from "gi://Gtk?version=3.0";
import Gdk from "gi://Gdk?version=3.0";

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/variable.ts
import Astal3 from "gi://AstalIO";

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/binding.ts
var snakeify = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
var kebabify = (str) => str.replace(/([a-z])([A-Z])/g, "$1-$2").replaceAll("_", "-").toLowerCase();
var Binding = class _Binding {
  transformFn = (v) => v;
  #emitter;
  #prop;
  static bind(emitter, prop) {
    return new _Binding(emitter, prop);
  }
  constructor(emitter, prop) {
    this.#emitter = emitter;
    this.#prop = prop && kebabify(prop);
  }
  toString() {
    return `Binding<${this.#emitter}${this.#prop ? `, "${this.#prop}"` : ""}>`;
  }
  as(fn) {
    const bind4 = new _Binding(this.#emitter, this.#prop);
    bind4.transformFn = (v) => fn(this.transformFn(v));
    return bind4;
  }
  get() {
    if (typeof this.#emitter.get === "function")
      return this.transformFn(this.#emitter.get());
    if (typeof this.#prop === "string") {
      const getter = `get_${snakeify(this.#prop)}`;
      if (typeof this.#emitter[getter] === "function")
        return this.transformFn(this.#emitter[getter]());
      return this.transformFn(this.#emitter[this.#prop]);
    }
    throw Error("can not get value of binding");
  }
  subscribe(callback) {
    if (typeof this.#emitter.subscribe === "function") {
      return this.#emitter.subscribe(() => {
        callback(this.get());
      });
    } else if (typeof this.#emitter.connect === "function") {
      const signal = `notify::${this.#prop}`;
      const id = this.#emitter.connect(signal, () => {
        callback(this.get());
      });
      return () => {
        this.#emitter.disconnect(id);
      };
    }
    throw Error(`${this.#emitter} is not bindable`);
  }
};
var { bind } = Binding;
var binding_default = Binding;

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/time.ts
import Astal from "gi://AstalIO";
var Time = Astal.Time;
function interval(interval2, callback) {
  return Astal.Time.interval(interval2, () => void callback?.());
}

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/process.ts
import Astal2 from "gi://AstalIO";
var Process = Astal2.Process;
function subprocess(argsOrCmd, onOut = print, onErr = printerr) {
  const args = Array.isArray(argsOrCmd) || typeof argsOrCmd === "string";
  const { cmd, err, out } = {
    cmd: args ? argsOrCmd : argsOrCmd.cmd,
    err: args ? onErr : argsOrCmd.err || onErr,
    out: args ? onOut : argsOrCmd.out || onOut
  };
  const proc = Array.isArray(cmd) ? Astal2.Process.subprocessv(cmd) : Astal2.Process.subprocess(cmd);
  proc.connect("stdout", (_, stdout) => out(stdout));
  proc.connect("stderr", (_, stderr) => err(stderr));
  return proc;
}
function exec(cmd) {
  return Array.isArray(cmd) ? Astal2.Process.execv(cmd) : Astal2.Process.exec(cmd);
}
function execAsync(cmd) {
  return new Promise((resolve, reject) => {
    if (Array.isArray(cmd)) {
      Astal2.Process.exec_asyncv(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_asyncv_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    } else {
      Astal2.Process.exec_async(cmd, (_, res) => {
        try {
          resolve(Astal2.Process.exec_finish(res));
        } catch (error) {
          reject(error);
        }
      });
    }
  });
}

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/variable.ts
var VariableWrapper = class extends Function {
  variable;
  errHandler = console.error;
  _value;
  _poll;
  _watch;
  pollInterval = 1e3;
  pollExec;
  pollTransform;
  pollFn;
  watchTransform;
  watchExec;
  constructor(init) {
    super();
    this._value = init;
    this.variable = new Astal3.VariableBase();
    this.variable.connect("dropped", () => {
      this.stopWatch();
      this.stopPoll();
    });
    this.variable.connect("error", (_, err) => this.errHandler?.(err));
    return new Proxy(this, {
      apply: (target, _, args) => target._call(args[0])
    });
  }
  _call(transform) {
    const b = binding_default.bind(this);
    return transform ? b.as(transform) : b;
  }
  toString() {
    return String(`Variable<${this.get()}>`);
  }
  get() {
    return this._value;
  }
  set(value) {
    if (value !== this._value) {
      this._value = value;
      this.variable.emit("changed");
    }
  }
  startPoll() {
    if (this._poll)
      return;
    if (this.pollFn) {
      this._poll = interval(this.pollInterval, () => {
        const v = this.pollFn(this.get());
        if (v instanceof Promise) {
          v.then((v2) => this.set(v2)).catch((err) => this.variable.emit("error", err));
        } else {
          this.set(v);
        }
      });
    } else if (this.pollExec) {
      this._poll = interval(this.pollInterval, () => {
        execAsync(this.pollExec).then((v) => this.set(this.pollTransform(v, this.get()))).catch((err) => this.variable.emit("error", err));
      });
    }
  }
  startWatch() {
    if (this._watch)
      return;
    this._watch = subprocess({
      cmd: this.watchExec,
      out: (out) => this.set(this.watchTransform(out, this.get())),
      err: (err) => this.variable.emit("error", err)
    });
  }
  stopPoll() {
    this._poll?.cancel();
    delete this._poll;
  }
  stopWatch() {
    this._watch?.kill();
    delete this._watch;
  }
  isPolling() {
    return !!this._poll;
  }
  isWatching() {
    return !!this._watch;
  }
  drop() {
    this.variable.emit("dropped");
  }
  onDropped(callback) {
    this.variable.connect("dropped", callback);
    return this;
  }
  onError(callback) {
    delete this.errHandler;
    this.variable.connect("error", (_, err) => callback(err));
    return this;
  }
  subscribe(callback) {
    const id = this.variable.connect("changed", () => {
      callback(this.get());
    });
    return () => this.variable.disconnect(id);
  }
  poll(interval2, exec3, transform = (out) => out) {
    this.stopPoll();
    this.pollInterval = interval2;
    this.pollTransform = transform;
    if (typeof exec3 === "function") {
      this.pollFn = exec3;
      delete this.pollExec;
    } else {
      this.pollExec = exec3;
      delete this.pollFn;
    }
    this.startPoll();
    return this;
  }
  watch(exec3, transform = (out) => out) {
    this.stopWatch();
    this.watchExec = exec3;
    this.watchTransform = transform;
    this.startWatch();
    return this;
  }
  observe(objs, sigOrFn, callback) {
    const f = typeof sigOrFn === "function" ? sigOrFn : callback ?? (() => this.get());
    const set = (obj, ...args) => this.set(f(obj, ...args));
    if (Array.isArray(objs)) {
      for (const obj of objs) {
        const [o, s] = obj;
        const id = o.connect(s, set);
        this.onDropped(() => o.disconnect(id));
      }
    } else {
      if (typeof sigOrFn === "string") {
        const id = objs.connect(sigOrFn, set);
        this.onDropped(() => objs.disconnect(id));
      }
    }
    return this;
  }
  static derive(deps, fn = (...args) => args) {
    const update = () => fn(...deps.map((d) => d.get()));
    const derived = new Variable(update());
    const unsubs = deps.map((dep) => dep.subscribe(() => derived.set(update())));
    derived.onDropped(() => unsubs.map((unsub) => unsub()));
    return derived;
  }
};
var Variable = new Proxy(VariableWrapper, {
  apply: (_t, _a, args) => new VariableWrapper(args[0])
});
var { derive } = Variable;
var variable_default = Variable;

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/_astal.ts
var noImplicitDestroy = Symbol("no no implicit destroy");
var setChildren = Symbol("children setter method");
function mergeBindings(array) {
  function getValues(...args) {
    let i = 0;
    return array.map(
      (value) => value instanceof binding_default ? args[i++] : value
    );
  }
  const bindings = array.filter((i) => i instanceof binding_default);
  if (bindings.length === 0)
    return array;
  if (bindings.length === 1)
    return bindings[0].as(getValues);
  return variable_default.derive(bindings, getValues)();
}
function setProp(obj, prop, value) {
  try {
    const setter = `set_${snakeify(prop)}`;
    if (typeof obj[setter] === "function")
      return obj[setter](value);
    return obj[prop] = value;
  } catch (error) {
    console.error(`could not set property "${prop}" on ${obj}:`, error);
  }
}
function hook(widget, object, signalOrCallback, callback) {
  if (typeof object.connect === "function" && callback) {
    const id = object.connect(signalOrCallback, (_, ...args) => {
      return callback(widget, ...args);
    });
    widget.connect("destroy", () => {
      object.disconnect(id);
    });
  } else if (typeof object.subscribe === "function" && typeof signalOrCallback === "function") {
    const unsub = object.subscribe((...args) => {
      signalOrCallback(widget, ...args);
    });
    widget.connect("destroy", unsub);
  }
}
function construct(widget, config) {
  let { setup, child, children = [], ...props } = config;
  if (children instanceof binding_default) {
    children = [children];
  }
  if (child) {
    children.unshift(child);
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  const bindings = Object.keys(props).reduce((acc, prop) => {
    if (props[prop] instanceof binding_default) {
      const binding = props[prop];
      delete props[prop];
      return [...acc, [prop, binding]];
    }
    return acc;
  }, []);
  const onHandlers = Object.keys(props).reduce((acc, key) => {
    if (key.startsWith("on")) {
      const sig = kebabify(key).split("-").slice(1).join("-");
      const handler = props[key];
      delete props[key];
      return [...acc, [sig, handler]];
    }
    return acc;
  }, []);
  const mergedChildren = mergeBindings(children.flat(Infinity));
  if (mergedChildren instanceof binding_default) {
    widget[setChildren](mergedChildren.get());
    widget.connect("destroy", mergedChildren.subscribe((v) => {
      widget[setChildren](v);
    }));
  } else {
    if (mergedChildren.length > 0) {
      widget[setChildren](mergedChildren);
    }
  }
  for (const [signal, callback] of onHandlers) {
    const sig = signal.startsWith("notify") ? signal.replace("-", "::") : signal;
    if (typeof callback === "function") {
      widget.connect(sig, callback);
    } else {
      widget.connect(sig, () => execAsync(callback).then(print).catch(console.error));
    }
  }
  for (const [prop, binding] of bindings) {
    if (prop === "child" || prop === "children") {
      widget.connect("destroy", binding.subscribe((v) => {
        widget[setChildren](v);
      }));
    }
    widget.connect("destroy", binding.subscribe((v) => {
      setProp(widget, prop, v);
    }));
    setProp(widget, prop, binding.get());
  }
  for (const [key, value] of Object.entries(props)) {
    if (value === void 0) {
      delete props[key];
    }
  }
  Object.assign(widget, props);
  setup?.(widget);
  return widget;
}
function isArrowFunction(func) {
  return !Object.hasOwn(func, "prototype");
}
function jsx(ctors2, ctor, { children, ...props }) {
  children ??= [];
  if (!Array.isArray(children))
    children = [children];
  children = children.filter(Boolean);
  if (children.length === 1)
    props.child = children[0];
  else if (children.length > 1)
    props.children = children;
  if (typeof ctor === "string") {
    if (isArrowFunction(ctors2[ctor]))
      return ctors2[ctor](props);
    return new ctors2[ctor](props);
  }
  if (isArrowFunction(ctor))
    return ctor(props);
  return new ctor(props);
}

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/gtk3/astalify.ts
import Astal4 from "gi://Astal?version=3.0";
import Gtk from "gi://Gtk?version=3.0";
import GObject from "gi://GObject";
function astalify(cls, clsName = cls.name) {
  class Widget2 extends cls {
    get css() {
      return Astal4.widget_get_css(this);
    }
    set css(css) {
      Astal4.widget_set_css(this, css);
    }
    get_css() {
      return this.css;
    }
    set_css(css) {
      this.css = css;
    }
    get className() {
      return Astal4.widget_get_class_names(this).join(" ");
    }
    set className(className) {
      Astal4.widget_set_class_names(this, className.split(/\s+/));
    }
    get_class_name() {
      return this.className;
    }
    set_class_name(className) {
      this.className = className;
    }
    get cursor() {
      return Astal4.widget_get_cursor(this);
    }
    set cursor(cursor) {
      Astal4.widget_set_cursor(this, cursor);
    }
    get_cursor() {
      return this.cursor;
    }
    set_cursor(cursor) {
      this.cursor = cursor;
    }
    get clickThrough() {
      return Astal4.widget_get_click_through(this);
    }
    set clickThrough(clickThrough) {
      Astal4.widget_set_click_through(this, clickThrough);
    }
    get_click_through() {
      return this.clickThrough;
    }
    set_click_through(clickThrough) {
      this.clickThrough = clickThrough;
    }
    get noImplicitDestroy() {
      return this[noImplicitDestroy];
    }
    set noImplicitDestroy(value) {
      this[noImplicitDestroy] = value;
    }
    set actionGroup([prefix, group]) {
      this.insert_action_group(prefix, group);
    }
    set_action_group(actionGroup) {
      this.actionGroup = actionGroup;
    }
    getChildren() {
      if (this instanceof Gtk.Bin) {
        return this.get_child() ? [this.get_child()] : [];
      } else if (this instanceof Gtk.Container) {
        return this.get_children();
      }
      return [];
    }
    setChildren(children) {
      children = children.flat(Infinity).map((ch) => ch instanceof Gtk.Widget ? ch : new Gtk.Label({ visible: true, label: String(ch) }));
      if (this instanceof Gtk.Container) {
        for (const ch of children)
          this.add(ch);
      } else {
        throw Error(`can not add children to ${this.constructor.name}`);
      }
    }
    [setChildren](children) {
      if (this instanceof Gtk.Container) {
        for (const ch of this.getChildren()) {
          this.remove(ch);
          if (!children.includes(ch) && !this.noImplicitDestroy)
            ch?.destroy();
        }
      }
      this.setChildren(children);
    }
    toggleClassName(cn, cond = true) {
      Astal4.widget_toggle_class_name(this, cn, cond);
    }
    hook(object, signalOrCallback, callback) {
      hook(this, object, signalOrCallback, callback);
      return this;
    }
    constructor(...params) {
      super();
      const props = params[0] || {};
      props.visible ??= true;
      construct(this, props);
    }
  }
  GObject.registerClass({
    GTypeName: `Astal_${clsName}`,
    Properties: {
      "class-name": GObject.ParamSpec.string(
        "class-name",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        ""
      ),
      "css": GObject.ParamSpec.string(
        "css",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        ""
      ),
      "cursor": GObject.ParamSpec.string(
        "cursor",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        "default"
      ),
      "click-through": GObject.ParamSpec.boolean(
        "click-through",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        false
      ),
      "no-implicit-destroy": GObject.ParamSpec.boolean(
        "no-implicit-destroy",
        "",
        "",
        GObject.ParamFlags.READWRITE,
        false
      )
    }
  }, Widget2);
  return Widget2;
}

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/gtk3/app.ts
import Gtk2 from "gi://Gtk?version=3.0";
import Astal5 from "gi://Astal?version=3.0";

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/overrides.ts
var snakeify2 = (str) => str.replace(/([a-z])([A-Z])/g, "$1_$2").replaceAll("-", "_").toLowerCase();
async function suppress(mod, patch2) {
  return mod.then((m) => patch2(m.default)).catch(() => void 0);
}
function patch(proto, prop) {
  Object.defineProperty(proto, prop, {
    get() {
      return this[`get_${snakeify2(prop)}`]();
    }
  });
}
await suppress(import("gi://AstalApps"), ({ Apps, Application }) => {
  patch(Apps.prototype, "list");
  patch(Application.prototype, "keywords");
  patch(Application.prototype, "categories");
});
await suppress(import("gi://AstalBattery"), ({ UPower }) => {
  patch(UPower.prototype, "devices");
});
await suppress(import("gi://AstalBluetooth"), ({ Adapter, Bluetooth, Device }) => {
  patch(Adapter.prototype, "uuids");
  patch(Bluetooth.prototype, "adapters");
  patch(Bluetooth.prototype, "devices");
  patch(Device.prototype, "uuids");
});
await suppress(import("gi://AstalHyprland"), ({ Hyprland, Monitor, Workspace }) => {
  patch(Hyprland.prototype, "monitors");
  patch(Hyprland.prototype, "workspaces");
  patch(Hyprland.prototype, "clients");
  patch(Monitor.prototype, "availableModes");
  patch(Monitor.prototype, "available_modes");
  patch(Workspace.prototype, "clients");
});
await suppress(import("gi://AstalMpris"), ({ Mpris: Mpris3, Player }) => {
  patch(Mpris3.prototype, "players");
  patch(Player.prototype, "supported_uri_schemes");
  patch(Player.prototype, "supportedUriSchemes");
  patch(Player.prototype, "supported_mime_types");
  patch(Player.prototype, "supportedMimeTypes");
  patch(Player.prototype, "comments");
});
await suppress(import("gi://AstalNetwork"), ({ Wifi }) => {
  patch(Wifi.prototype, "access_points");
  patch(Wifi.prototype, "accessPoints");
});
await suppress(import("gi://AstalNotifd"), ({ Notifd, Notification }) => {
  patch(Notifd.prototype, "notifications");
  patch(Notification.prototype, "actions");
});
await suppress(import("gi://AstalPowerProfiles"), ({ PowerProfiles }) => {
  patch(PowerProfiles.prototype, "actions");
});
await suppress(import("gi://AstalWp"), ({ Wp: Wp2, Audio: Audio2, Video }) => {
  patch(Wp2.prototype, "endpoints");
  patch(Wp2.prototype, "devices");
  patch(Audio2.prototype, "streams");
  patch(Audio2.prototype, "recorders");
  patch(Audio2.prototype, "microphones");
  patch(Audio2.prototype, "speakers");
  patch(Audio2.prototype, "devices");
  patch(Video.prototype, "streams");
  patch(Video.prototype, "recorders");
  patch(Video.prototype, "sinks");
  patch(Video.prototype, "sources");
  patch(Video.prototype, "devices");
});

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/_app.ts
import { setConsoleLogDomain } from "console";
import { exit, programArgs } from "system";
import IO from "gi://AstalIO";
import GObject2 from "gi://GObject";
function mkApp(App) {
  return new class AstalJS extends App {
    static {
      GObject2.registerClass({ GTypeName: "AstalJS" }, this);
    }
    eval(body) {
      return new Promise((res, rej) => {
        try {
          const fn = Function(`return (async function() {
                        ${body.includes(";") ? body : `return ${body};`}
                    })`);
          fn()().then(res).catch(rej);
        } catch (error) {
          rej(error);
        }
      });
    }
    requestHandler;
    vfunc_request(msg, conn) {
      if (typeof this.requestHandler === "function") {
        this.requestHandler(msg, (response) => {
          IO.write_sock(
            conn,
            String(response),
            (_, res) => IO.write_sock_finish(res)
          );
        });
      } else {
        super.vfunc_request(msg, conn);
      }
    }
    apply_css(style, reset = false) {
      super.apply_css(style, reset);
    }
    quit(code) {
      super.quit();
      exit(code ?? 0);
    }
    start({ requestHandler, css, hold, main, client, icons, ...cfg } = {}) {
      const app = this;
      client ??= () => {
        print(`Astal instance "${app.instanceName}" already running`);
        exit(1);
      };
      Object.assign(this, cfg);
      setConsoleLogDomain(app.instanceName);
      this.requestHandler = requestHandler;
      app.connect("activate", () => {
        main?.(...programArgs);
      });
      try {
        app.acquire_socket();
      } catch (error) {
        return client((msg) => IO.send_message(app.instanceName, msg), ...programArgs);
      }
      if (css)
        this.apply_css(css, false);
      if (icons)
        app.add_icons(icons);
      hold ??= true;
      if (hold)
        app.hold();
      app.runAsync([]);
    }
  }();
}

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/gtk3/app.ts
Gtk2.init(null);
var app_default = mkApp(Astal5.Application);

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/gtk3/widget.ts
import Astal6 from "gi://Astal?version=3.0";
import Gtk3 from "gi://Gtk?version=3.0";
import GObject3 from "gi://GObject";
function filter(children) {
  return children.flat(Infinity).map((ch) => ch instanceof Gtk3.Widget ? ch : new Gtk3.Label({ visible: true, label: String(ch) }));
}
Object.defineProperty(Astal6.Box.prototype, "children", {
  get() {
    return this.get_children();
  },
  set(v) {
    this.set_children(v);
  }
});
var Box = class extends astalify(Astal6.Box) {
  static {
    GObject3.registerClass({ GTypeName: "Box" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    this.set_children(filter(children));
  }
};
var Button = class extends astalify(Astal6.Button) {
  static {
    GObject3.registerClass({ GTypeName: "Button" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var CenterBox = class extends astalify(Astal6.CenterBox) {
  static {
    GObject3.registerClass({ GTypeName: "CenterBox" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    const ch = filter(children);
    this.startWidget = ch[0] || new Gtk3.Box();
    this.centerWidget = ch[1] || new Gtk3.Box();
    this.endWidget = ch[2] || new Gtk3.Box();
  }
};
var CircularProgress = class extends astalify(Astal6.CircularProgress) {
  static {
    GObject3.registerClass({ GTypeName: "CircularProgress" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var DrawingArea = class extends astalify(Gtk3.DrawingArea) {
  static {
    GObject3.registerClass({ GTypeName: "DrawingArea" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Entry = class extends astalify(Gtk3.Entry) {
  static {
    GObject3.registerClass({ GTypeName: "Entry" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var EventBox = class extends astalify(Astal6.EventBox) {
  static {
    GObject3.registerClass({ GTypeName: "EventBox" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Icon = class extends astalify(Astal6.Icon) {
  static {
    GObject3.registerClass({ GTypeName: "Icon" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Label = class extends astalify(Astal6.Label) {
  static {
    GObject3.registerClass({ GTypeName: "Label" }, this);
  }
  constructor(props) {
    super(props);
  }
  setChildren(children) {
    this.label = String(children);
  }
};
var LevelBar = class extends astalify(Astal6.LevelBar) {
  static {
    GObject3.registerClass({ GTypeName: "LevelBar" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var MenuButton = class extends astalify(Gtk3.MenuButton) {
  static {
    GObject3.registerClass({ GTypeName: "MenuButton" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
Object.defineProperty(Astal6.Overlay.prototype, "overlays", {
  get() {
    return this.get_overlays();
  },
  set(v) {
    this.set_overlays(v);
  }
});
var Overlay = class extends astalify(Astal6.Overlay) {
  static {
    GObject3.registerClass({ GTypeName: "Overlay" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    const [child, ...overlays] = filter(children);
    this.set_child(child);
    this.set_overlays(overlays);
  }
};
var Revealer = class extends astalify(Gtk3.Revealer) {
  static {
    GObject3.registerClass({ GTypeName: "Revealer" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Scrollable = class extends astalify(Astal6.Scrollable) {
  static {
    GObject3.registerClass({ GTypeName: "Scrollable" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};
var Slider = class extends astalify(Astal6.Slider) {
  static {
    GObject3.registerClass({ GTypeName: "Slider" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Stack = class extends astalify(Astal6.Stack) {
  static {
    GObject3.registerClass({ GTypeName: "Stack" }, this);
  }
  constructor(props, ...children) {
    super({ children, ...props });
  }
  setChildren(children) {
    this.set_children(filter(children));
  }
};
var Switch = class extends astalify(Gtk3.Switch) {
  static {
    GObject3.registerClass({ GTypeName: "Switch" }, this);
  }
  constructor(props) {
    super(props);
  }
};
var Window = class extends astalify(Astal6.Window) {
  static {
    GObject3.registerClass({ GTypeName: "Window" }, this);
  }
  constructor(props, child) {
    super({ child, ...props });
  }
};

// sass:/home/estebandev/Dev/Projects/DesktopBar/style/style.scss
var style_default = '.bar {\n  background-color: transparent;\n}\n.bar > centerbox {\n  color: @theme_fg_color;\n  background-color: @theme_bg_color;\n  border-radius: 4px;\n  padding: 2px 20px;\n}\n\n.clock {\n  font-size: 16px;\n}\n.clock .time {\n  font-weight: 700;\n  background-color: transparent;\n}\n\n.systray {\n  margin: 0 4px;\n}\n.systray * {\n  background-color: @theme_bg_color;\n}\n\n.audio {\n  margin: 0 10px 0 5px;\n}\n\n.dashboardButton {\n  border-radius: 4px;\n}\n.dashboardButton:hover {\n  background-color: #282727;\n}\n.dashboardButton revealer {\n  padding: 4px;\n}\n\n.Media button {\n  font-weight: 400;\n  background-color: transparent;\n}\n\n.dashBoard > centerbox {\n  margin: 10px;\n  background-color: @theme_bg_color;\n  border: 1px solid @theme_borders;\n  border-radius: 4px;\n  padding: 10px;\n}\n\n.Profile {\n  font-family: Fira Code Nerd Font;\n  margin-left: 10px;\n}\n.Profile .ProfileIcon {\n  background-image: url("https://avatars.githubusercontent.com/u/102267595?v=4");\n  background-size: 100%;\n  background-repeat: no-repeat;\n  border: 1px solid @theme_fg_color;\n  border-radius: 50px;\n}\n\n.MusicPlayerWindow > centerbox {\n  margin-top: 10px;\n  background-color: @theme_bg_color;\n  border-radius: 4px;\n  border: 1px solid @theme_borders;\n}\n\n.MediaPlayer {\n  padding: 0.6rem;\n  background-color: @theme_bg_color;\n}\n.MediaPlayer box.cover-art {\n  min-width: 120px;\n  min-height: 120px;\n  border-radius: 9px;\n  margin-right: 0.6rem;\n  background-size: contain;\n  background-position: center;\n}\n.MediaPlayer box.title label {\n  font-weight: bold;\n  font-size: 1.1em;\n}\n.MediaPlayer scale {\n  padding: 0;\n  margin: 0.4rem 0;\n}\n.MediaPlayer scale trough {\n  min-height: 8px;\n}\n.MediaPlayer scale highlight {\n  background-color: @theme_fg_color;\n}\n.MediaPlayer scale slider {\n  all: unset;\n}\n.MediaPlayer centerbox.actions {\n  min-width: 220px;\n}\n.MediaPlayer centerbox.actions button {\n  min-width: 0;\n  min-height: 0;\n  padding: 0.4rem;\n  margin: 0 0.2rem;\n}';

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/index.ts
import { default as default3 } from "gi://AstalIO?version=0.1";

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/file.ts
import Astal8 from "gi://AstalIO";
import Gio from "gi://Gio?version=2.0";

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/gobject.ts
import GObject4 from "gi://GObject";
import { default as default2 } from "gi://GLib?version=2.0";
var meta = Symbol("meta");
var priv = Symbol("priv");
var { ParamSpec, ParamFlags } = GObject4;

// ../../../../../nix/store/88kb2cyzj1hwad8s43wzdkafyp3hsh31-astal-gjs/share/astal/gjs/gtk3/jsx-runtime.ts
function jsx2(ctor, props) {
  return jsx(ctors, ctor, props);
}
var ctors = {
  box: Box,
  button: Button,
  centerbox: CenterBox,
  circularprogress: CircularProgress,
  drawingarea: DrawingArea,
  entry: Entry,
  eventbox: EventBox,
  // TODO: fixed
  // TODO: flowbox
  icon: Icon,
  label: Label,
  levelbar: LevelBar,
  // TODO: listbox
  menubutton: MenuButton,
  overlay: Overlay,
  revealer: Revealer,
  scrollable: Scrollable,
  slider: Slider,
  stack: Stack,
  switch: Switch,
  window: Window
};
var jsxs = jsx2;

// widget/Clock.tsx
function Clock() {
  const formatHour = "%H:%M";
  const formatDate = "%A %e %B";
  const time = Variable("").poll(1e3, () => default2.DateTime.new_now_local().format(formatHour));
  const date = Variable("").poll(1e3, () => default2.DateTime.new_now_local().format(formatDate));
  return /* @__PURE__ */ jsxs(
    "box",
    {
      className: "clock",
      hexpand: true,
      spacing: 6,
      children: [
        /* @__PURE__ */ jsx2(
          "label",
          {
            className: "date",
            label: date()
          }
        ),
        /* @__PURE__ */ jsx2(
          "button",
          {
            className: "time",
            onDestroy: () => {
              time.drop();
              date.drop();
            },
            label: time(),
            onClicked: "notify-send open calendar"
          }
        )
      ]
    }
  );
}

// widget/Tray.tsx
import Tray from "gi://AstalTray";
function Systray() {
  const tray = Tray.get_default();
  return /* @__PURE__ */ jsx2(
    "box",
    {
      className: "systray",
      spacing: 3,
      children: bind(tray, "items").as((items) => items.map((item) => /* @__PURE__ */ jsx2(
        "menubutton",
        {
          tooltipMarkup: bind(item, "tooltipMarkup"),
          usePopover: false,
          actionGroup: bind(item, "actionGroup").as((ag) => ["dbusmenu", ag]),
          menuModel: bind(item, "menuModel"),
          children: /* @__PURE__ */ jsx2("icon", { gicon: bind(item, "gicon") })
        }
      )))
    }
  );
}

// widget/Audio.tsx
import Wp from "gi://AstalWp";
function Audio() {
  const speaker = Wp.get_default()?.audio.defaultSpeaker;
  return /* @__PURE__ */ jsxs("box", { className: "audio", spacing: 2, children: [
    /* @__PURE__ */ jsx2("icon", { icon: bind(speaker, "volumeIcon") }),
    /* @__PURE__ */ jsx2("label", { label: bind(speaker, "volume").as((ag) => Math.floor(ag * 100).toString()) })
  ] });
}

// widget/Networking.tsx
import Network from "gi://AstalNetwork";
function Networking() {
  const network = Network.get_default();
  const connection = network.primary.ASTAL_NETWORK_PRIMARY_WIFI ? "wifi" : "wired";
  const wifi = bind(network, "wifi");
  const wired = bind(network, "wired");
  return connection === "wifi" ? wifiStatus(wifi) : wiredStatus(wired);
}
function wifiStatus(wifi) {
  return /* @__PURE__ */ jsx2("box", { visible: wifi.as(Boolean), children: wifi.as((wifi2) => wifi2 && /* @__PURE__ */ jsx2(
    "icon",
    {
      tooltipText: bind(wifi2, "ssid").as(String),
      className: "Wifi",
      icon: bind(wifi2, "iconName")
    }
  )) });
}
function wiredStatus(wired) {
  return /* @__PURE__ */ jsx2("box", { visible: wired.as(Boolean), children: wired.as((wired2) => wired2 && /* @__PURE__ */ jsx2(
    "icon",
    {
      name: "wired",
      tooltipText: bind(wired2, "device").as(String),
      className: "wired",
      icon: bind(wired2, "iconName")
    }
  )) });
}

// widget/Music.tsx
import Mpris from "gi://AstalMpris";
function Music() {
  return Media();
}
function Media() {
  const mpris = Mpris.get_default();
  return /* @__PURE__ */ jsx2("box", { className: "Media", children: bind(mpris, "players").as((ps) => ps[0] ? /* @__PURE__ */ jsxs("box", { children: [
    /* @__PURE__ */ jsx2(
      "box",
      {
        className: "Cover",
        valign: Gtk4.Align.CENTER,
        css: bind(ps[0], "coverArt").as(
          (cover) => `background-image: url('${cover}');`
        )
      }
    ),
    /* @__PURE__ */ jsx2(
      "button",
      {
        label: bind(ps[0], "metadata").as(
          () => `${ps[0].title} - ${ps[0].artist}`
        ),
        onClicked: () => {
          app_default.toggle_window("MusicPlayer");
        }
      }
    )
  ] }) : /* @__PURE__ */ jsx2("label", { label: "Nothing Playing" })) });
}

// widget/ActiveClient.tsx
function ActiveClient() {
  const activeClient = Variable("activeClient").poll(450, () => getActiveWindow());
  return /* @__PURE__ */ jsx2("box", { children: /* @__PURE__ */ jsx2("label", { maxWidthChars: 15, label: bind(activeClient).as((client) => {
    if (!client || client == null)
      return "";
    const title = client.title ?? "";
    const result = title.length > 20 ? `${title.substring(0, 20)}... - ${client.app_id}` : title;
    return result;
  }) }) });
}
function getActiveWindow() {
  const out = exec("niri msg --json windows");
  const windows = JSON.parse(out);
  return windows.find((client) => client.is_focused);
}

// widget/DashboardButton.tsx
function DashboardButton() {
  const show = Variable(false);
  return /* @__PURE__ */ jsx2(
    "eventbox",
    {
      className: "dashboardButton",
      onHover: () => {
        show.set(true);
      },
      onHoverLost: () => {
        show.set(false);
      },
      onClick: () => {
        app_default.toggle_window("Dashboard");
      },
      children: /* @__PURE__ */ jsxs("box", { children: [
        /* @__PURE__ */ jsx2("icon", { icon: default2.get_os_info("LOGO") || "missing-symbolic" }),
        /* @__PURE__ */ jsx2(
          "revealer",
          {
            revealChild: bind(show),
            transitionType: Gtk4.RevealerTransitionType.SLIDE_RIGHT,
            children: /* @__PURE__ */ jsx2("label", { label: "Menu" })
          }
        )
      ] })
    }
  );
}

// widget/Bar.tsx
function Bar(gdkmonitor) {
  const { TOP, LEFT, RIGHT } = Astal7.WindowAnchor;
  return /* @__PURE__ */ jsx2(
    "window",
    {
      className: "bar",
      gdkmonitor,
      exclusivity: Astal7.Exclusivity.EXCLUSIVE,
      anchor: TOP | LEFT | RIGHT,
      application: app_default,
      children: /* @__PURE__ */ jsxs(
        "centerbox",
        {
          className: "bar_container",
          children: [
            /* @__PURE__ */ jsxs(
              "box",
              {
                hexpand: true,
                spacing: 7,
                halign: Gtk4.Align.START,
                children: [
                  /* @__PURE__ */ jsx2(DashboardButton, {}),
                  /* @__PURE__ */ jsx2(ActiveClient, {})
                ]
              }
            ),
            /* @__PURE__ */ jsx2(
              "box",
              {
                hexpand: true,
                halign: Gtk4.Align.CENTER,
                children: /* @__PURE__ */ jsx2(Music, {})
              }
            ),
            /* @__PURE__ */ jsxs(
              "box",
              {
                halign: Gtk4.Align.END,
                valign: Gtk4.Align.CENTER,
                hexpand: true,
                spacing: 6,
                children: [
                  /* @__PURE__ */ jsx2(Systray, {}),
                  /* @__PURE__ */ jsx2(Audio, {}),
                  /* @__PURE__ */ jsx2(Networking, {}),
                  /* @__PURE__ */ jsx2(Clock, {})
                ]
              }
            )
          ]
        }
      )
    }
  );
}

// libs/fetch.ts
import GLib6 from "gi://GLib";
import Gio2 from "gi://Gio";
import Soup from "gi://Soup?version=3.0";

// widget/dash/Profile.tsx
function Profile() {
  return /* @__PURE__ */ jsxs("box", { spacing: 10, className: "Profile", children: [
    /* @__PURE__ */ jsx2("box", { heightRequest: 40, widthRequest: 40, className: "ProfileIcon" }),
    /* @__PURE__ */ jsx2("box", { vertical: true, valign: Gtk4.Align.CENTER, halign: Gtk4.Align.START, spacing: 5, children: /* @__PURE__ */ jsx2("label", { label: `${default2.getenv("USER")}@${exec("cat /etc/hostname")}`, className: "username" }) })
  ] });
}

// widget/dash/PowerButtons.tsx
function PowerButtons() {
  return /* @__PURE__ */ jsxs("box", { spacing: 10, className: "Profile", children: [
    /* @__PURE__ */ jsx2(
      "button",
      {
        onClicked: () => {
          exec("poweroff");
        },
        children: /* @__PURE__ */ jsx2("label", { children: "Power off" })
      }
    ),
    /* @__PURE__ */ jsx2(
      "button",
      {
        onClicked: () => exec("systemctl suspend"),
        children: /* @__PURE__ */ jsx2("label", { children: "Sleep" })
      }
    )
  ] });
}

// widget/dash/Dashboard.tsx
function Dashboard(gdkmonitor) {
  const { TOP, LEFT } = Astal7.WindowAnchor;
  return /* @__PURE__ */ jsx2(
    "window",
    {
      className: "dashBoard",
      gdkmonitor,
      exclusivity: Astal7.Exclusivity.EXCLUSIVE,
      anchor: TOP | LEFT,
      application: app_default,
      name: "Dashboard",
      children: /* @__PURE__ */ jsx2(
        "centerbox",
        {
          className: "dashboard",
          children: /* @__PURE__ */ jsxs(
            "box",
            {
              vertical: true,
              heightRequest: 10,
              children: [
                /* @__PURE__ */ jsx2(Profile, {}),
                /* @__PURE__ */ jsx2(PowerButtons, {})
              ]
            }
          )
        }
      )
    }
  );
}

// widget/dash/MediaPlayers.tsx
import Mpris2 from "gi://AstalMpris";
function lengthStr(length) {
  const min = Math.floor(length / 60);
  const sec = Math.floor(length % 60);
  const sec0 = sec < 10 ? "0" : "";
  return `${min}:${sec0}${sec}`;
}
function MediaPlayer({ player }) {
  const { START, END } = Gtk4.Align;
  const title = bind(player, "title").as((t) => t || "Unknown Track");
  const artist = bind(player, "artist").as((a) => a || "Unknown Artist");
  const coverArt = bind(player, "coverArt").as((c) => `background-image: url('${c}')`);
  const playerIcon = bind(player, "entry").as((e) => Astal7.Icon.lookup_icon(e) ? e : "audio-x-generic-symbolic");
  const position = bind(player, "position").as((p) => player.length > 0 ? p / player.length : 0);
  const playIcon = bind(player, "playbackStatus").as(
    (s) => s === Mpris2.PlaybackStatus.PLAYING ? "media-playback-pause-symbolic" : "media-playback-start-symbolic"
  );
  return /* @__PURE__ */ jsxs("box", { className: "MediaPlayer", children: [
    /* @__PURE__ */ jsx2("box", { className: "cover-art", css: coverArt }),
    /* @__PURE__ */ jsxs("box", { vertical: true, children: [
      /* @__PURE__ */ jsxs("box", { className: "title", children: [
        /* @__PURE__ */ jsx2("label", { truncate: true, hexpand: true, halign: START, label: title }),
        /* @__PURE__ */ jsx2("icon", { icon: playerIcon })
      ] }),
      /* @__PURE__ */ jsx2("label", { halign: START, valign: START, vexpand: true, wrap: true, label: artist }),
      /* @__PURE__ */ jsx2(
        "slider",
        {
          visible: bind(player, "length").as((l) => l > 0),
          onDragged: ({ value }) => player.position = value * player.length,
          value: position
        }
      ),
      /* @__PURE__ */ jsxs("centerbox", { className: "actions", children: [
        /* @__PURE__ */ jsx2(
          "label",
          {
            hexpand: true,
            className: "position",
            halign: START,
            visible: bind(player, "length").as((l) => l > 0),
            label: bind(player, "position").as(lengthStr)
          }
        ),
        /* @__PURE__ */ jsxs("box", { children: [
          /* @__PURE__ */ jsx2(
            "button",
            {
              onClicked: () => player.previous(),
              visible: bind(player, "canGoPrevious"),
              children: /* @__PURE__ */ jsx2("icon", { icon: "media-skip-backward-symbolic" })
            }
          ),
          /* @__PURE__ */ jsx2(
            "button",
            {
              onClicked: () => player.play_pause(),
              visible: bind(player, "canControl"),
              children: /* @__PURE__ */ jsx2("icon", { icon: playIcon })
            }
          ),
          /* @__PURE__ */ jsx2(
            "button",
            {
              onClicked: () => player.next(),
              visible: bind(player, "canGoNext"),
              children: /* @__PURE__ */ jsx2("icon", { icon: "media-skip-forward-symbolic" })
            }
          )
        ] }),
        /* @__PURE__ */ jsx2(
          "label",
          {
            className: "length",
            hexpand: true,
            halign: END,
            visible: bind(player, "length").as((l) => l > 0),
            label: bind(player, "length").as((l) => l > 0 ? lengthStr(l) : "0:00")
          }
        )
      ] })
    ] })
  ] });
}
function MprisPlayers() {
  const mpris = Mpris2.get_default();
  return /* @__PURE__ */ jsx2("box", { vertical: true, children: bind(mpris, "players").as((arr) => arr.map((player) => /* @__PURE__ */ jsx2(MediaPlayer, { player }))) });
}

// widget/dash/MusicPlayer.tsx
function MusicPlayer(gdkmonitor) {
  const { TOP } = Astal7.WindowAnchor;
  return /* @__PURE__ */ jsx2(
    "window",
    {
      className: "MusicPlayerWindow",
      gdkmonitor,
      exclusivity: Astal7.Exclusivity.NORMAL,
      anchor: TOP,
      windowPosition: Gtk4.WindowPosition.CENTER,
      application: app_default,
      name: "MusicPlayer",
      children: /* @__PURE__ */ jsx2(
        "centerbox",
        {
          className: "musicPlayer",
          children: /* @__PURE__ */ jsx2(
            "box",
            {
              vertical: true,
              children: /* @__PURE__ */ jsx2(MprisPlayers, {})
            }
          )
        }
      )
    }
  );
}

// app.ts
app_default.start({
  css: style_default,
  icons: `./assets`,
  main() {
    app_default.get_monitors().map(Bar);
    app_default.get_monitors().map(Dashboard);
    app_default.toggle_window("Dashboard");
    app_default.get_monitors().map(MusicPlayer);
    app_default.toggle_window("MusicPlayer");
  }
});
//# sourceMappingURL=data:application/json;base64,
